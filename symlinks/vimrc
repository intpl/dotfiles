set nocompatible
set encoding=utf-8
filetype plugin indent on
syntax on

"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

if has("autocmd")
  filetype plugin indent on
endif

set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

:set tabstop=2
:set shiftwidth=2
:set expandtab
:set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab

set path=$PWD/**

set shell=bash

:noremap <C-P> @:<CR>

" map <C-j> <C-W>j
" map <C-k> <C-W>k
" map <C-h> <C-W>h
" map <C-l> <C-W>l

set autoindent
set number

map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-H> <C-W>h<C-W>_
map <C-L> <C-W>l<C-W>_

set pastetoggle=<F2>

noremap <F9> gT
noremap <F10> gt

:set incsearch
:set hlsearch
nmap <silent> <BS> :nohlsearch<CR>

nmap <space> zz
nmap n nzz
nmap N Nzz

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'alexbyk/vim-ultisnips-js-testing'
Plug 'honza/vim-snippets'
Plug 'KurtPreston/vim-autoformat-rails'
Plug 'sukima/xmledit'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'myusuf3/numbers.vim'
Plug 'Raimondi/delimitMate'
Plug 'docunext/closetag.vim'
Plug 'gregsexton/MatchTag'
Plug 'pangloss/vim-javascript'
Plug 'nathanaelkane/vim-indent-guides'
"Plug 'othree/javascript-libraries-syntax.vim'
"Plug 'scrooloose/syntastic'
"Plug 'matthewsimo/angular-vim-snippets'
"Plug 'tpope/vim-haml'
Plug 'tpope/vim-surround'
"Plug 'nelstrom/vim-markdown-folding'
"Plug 'bruno-/vim-ruby-fold'
"Plug 'godlygeek/tabular'
"Plug 'plasticboy/vim-markdown'
Plug 'rking/ag.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'tmhedberg/matchit'
"Plug 'fatih/vim-go'
Plug 'elixir-lang/vim-elixir'
Plug 'mxw/vim-jsx'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'ryanoasis/vim-devicons'
Plug 'ntpeters/vim-better-whitespace'
Plug 'vim-utils/vim-man'
Plug 'leafgarland/typescript-vim'
Plug 'posva/vim-vue'
Plug 'mattn/emmet-vim'
Plug 'slim-template/vim-slim'
Plug 'othree/yajs.vim'
Plug 'gaogao1030/vim-skim'
Plug 'junegunn/vim-easy-align'
Plug 'jreybert/vimagit'
Plug 'tpope/vim-repeat'
Plug 'sjl/gundo.vim'
Plug 'othree/html5.vim'
Plug 'elzr/vim-json'
Plug 'jelera/vim-javascript-syntax'
Plug 'rust-lang/rust.vim'
Plug 'rhysd/vim-crystal'
Plug 'vim-ruby/vim-ruby'
Plug 'godlygeek/tabular'
Plug 'jgdavey/vim-blockle'
Plug 'w0rp/ale'
Plug 'tpope/vim-eunuch'
Plug 'sheerun/vim-polyglot'
" nie dziala z NerdTree, Rg/Ag etc. Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdcommenter'
Plug 'Shougo/neocomplete.vim'
" Plug 'c-brenn/phoenix.vim'
Plug 'tpope/vim-projectionist'
Plug 'maxbrunsfeld/vim-yankstack'
" Plug 'easymotion/vim-easymotion'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'prettier/vim-prettier', {
	\ 'do': 'yarn install',
	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql'] }
Plug 'will133/vim-dirdiff'

" Themes below
Plug 'sjl/badwolf'
Plug 'wellsjo/wells-colorscheme.vim'
Plug 'ajgrf/sprinkles'
Plug 'stulzer/heroku-colorscheme'
Plug 'CruizeMissile/Revolution.vim'
Plug 'whatyouhide/vim-gotham'
Plug 'farseer90718/flattr.vim'
Plug 'tomasr/molokai'
Plug 'vim-scripts/BusyBee'
Plug 'gregsexton/Muon'
" DEPRECATED Plug 'desert-warm-256'
Plug 'flazz/vim-colorschemes'
Plug 'altercation/vim-colors-solarized'
Plug 'aliou/moriarty.vim'
Plug 'morhetz/gruvbox'
Plug 'jpo/vim-railscasts-theme'
Plug 'nightsense/seabird'
Plug 'zcodes/vim-colors-basic'
Plug 'vim-scripts/PapayaWhip'
Plug 'rakr/vim-one'

" Themes above

call plug#end()
" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_ruby_checkers          = ['rubocop']
" let g:syntastic_ruby_rubocop_exec      = '/home/b/.rvm/rubies/ruby-2.3.0/bin/ruby  /home/b/.rvm/gems/ruby-2.3.0/bin/rubocop'
" let g:syntastic_loc_list_height =3
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

"let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
"nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" All of your Plugins must be added before the following line
filetype plugin indent on    " required
set tags=./tags;
set grepprg=ack
set wildmenu
set winminheight=0

set backspace=indent,eol,start

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_switch_buffer = 0

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site|node_modules)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \}

set wildignore+=*/.git/*,*/tmp/*,*.swp,*/node_modules/*
let g:ctrlp_use_caching = 0
if executable('rg')
	set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
endif

" Folding with space
" nnoremap <Space> za

" if exists('$TMUX')
"   let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"   let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" else
"   let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"   let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif

set backup
set backupdir=~/.vim-tmp,~/.tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,/var/tmp,/tmp
set writebackup

let g:airline_theme='minimalist'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#ale#enabled = 1
set laststatus=2

"autocmd vimenter * NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>

set cursorline
"hi CursorLine   cterm=NONE ctermbg=8
set fillchars+=vert:\ 

set t_Co=256
colorscheme one-dark "PapayaWhip molokai BusyBee basic-light
"hi CursorLine term=bold cterm=bold ctermbg=233

highlight Normal ctermbg=NONE
highlight NonText ctermbg=NONE
highlight Comment ctermbg=NONE
highlight Constant ctermbg=NONE
highlight Identifier ctermbg=NONE
highlight Cursor ctermbg=NONE
highlight String ctermbg=NONE
highlight Character ctermbg=NONE
highlight Number ctermbg=NONE
highlight Special ctermbg=NONE
highlight Folded ctermbg=NONE
highlight PreProc ctermbg=NONE

hi! VertSplit ctermfg=NONE ctermbg=NONE term=NONE

let g:javascript_enable_domhtmlcss = 1
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger

map <C-c> "+y

noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>

" this is needed by webpack. it ensures that original file is overwritten:
set backupcopy=yes

" more natural behavior
  set splitbelow
  set splitright

hi StatusLine                  ctermfg=7     ctermbg=8     cterm=NONE
hi StatusLineNC                ctermfg=2     ctermbg=8     cterm=NONE

highlight LineNr ctermfg=241
set shell=/bin/bash

command -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif

nnoremap <F5> :CtrlPClearCache<cr>call NERDTreeMapRefreshRoot()<cr>
function! NERDTreeMapRefreshRoot()
    if nerdtree#isTreeOpen()
        call nerdtree#putCursorInTreeWin()
        call nerdtree#invokeKeyMap('R')
        " Go back to previous window.
        wincmd p
    endif
endfunction

let g:jsx_ext_required = 0 " Allow JSX in normal JS files

let g:prettier#config#tab_width = 2
let g:prettier#config#use_tabs = 'false'
let g:prettier#config#semi = 'true'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'false'
let g:prettier#config#trailing_comma = 'none'

autocmd FileType ruby compiler ruby
let g:gundo_prefer_python3 = 1
nnoremap <F4> :GundoToggle<CR>
:let mapleader = ","
nnoremap <Leader>W :w<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>fs :w<CR>
nnoremap <Leader>wq :wq<CR>
nnoremap <Leader>cq :cq<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bk :bdelete<CR>
nnoremap <Leader>bd :bdelete<CR>

map <Leader>p obinding.pry_remote '0.0.0.0'<ESC>
map <Leader>o obinding.pry<ESC>
map <Leader>O Obinding.pry<ESC>
map <Leader>; A;<ESC>

nmap ,t :NERDTreeFind<CR>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
